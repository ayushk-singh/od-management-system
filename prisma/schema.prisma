generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ODStatus {
  PENDING
  APPROVED_BY_FACULTY
  REJECTED_BY_FACULTY
  FORWARDED_TO_HOD
  APPROVED_BY_HOD
  REJECTED_BY_HOD
}

model Department {
  id        String     @id @default(cuid()) 
  name      String     @unique
  students  Student[]
  faculties Faculty[]
  hods      HOD[]
}

model Student {
  id           String     @id @default(cuid()) 
  clerkId      String     @unique
  name         String
  registerNo   String     @unique
  class        String
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  odRequests   ODApplication[]
  createdAt    DateTime   @default(now()) 
}

model Faculty {
  id           String     @id @default(cuid()) 
  clerkId      String     @unique
  name         String
  email        String     @unique
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  odApplicationsToReview ODApplication[]
  createdAt    DateTime   @default(now()) 
}

model HOD {
  id           String     @id @default(cuid()) 
  clerkId      String     @unique
  name         String
  email        String     @unique
  departmentId String     @unique
  department   Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  reviewedApplications ODApplication[]
  createdAt    DateTime   @default(now()) 
}

model ODApplication {
  id                String     @id @default(cuid()) 
  studentId         String
  facultyId         String?
  hodId             String?
  status            ODStatus   @default(PENDING)
  location          String
  dateFrom          DateTime
  dateTo            DateTime
  totalDays         Int
  reason            String

  facultyRemark     String?
  hodRemark         String?

  student           Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  faculty           Faculty?   @relation(fields: [facultyId], references: [id], onDelete: SetNull)
  hod               HOD?       @relation(fields: [hodId], references: [id], onDelete: SetNull)

  facultyReviewedAt DateTime?
  hodReviewedAt     DateTime?

  createdAt         DateTime   @default(now()) 
  updatedAt         DateTime   @updatedAt

  @@index([studentId]) 
  @@index([facultyId]) 
  @@index([hodId]) 
}
